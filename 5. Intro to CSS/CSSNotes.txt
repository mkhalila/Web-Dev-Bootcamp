CSS
	Cascading Style Sheets
	"The Adjectives"
	Separate from HTML

General Rule
	selector {
		property: value;
		anotherProperty: value;
	}

	h1 {
		color: purple
		font-size: 56px;
	}

	img {
		border-color: red;
		border-width: 3px
	}

Implementation
	1. Can style inline in HTML
	2. Style tag - inside HTML doc
	3. Link tag

1. Inline = Bad
	Duplication of styles
	Also want to seperate concerns
	HTML should only define structure

	<h1 style="color: purple"></h1>

2. Style Tag
	Still inside HTML -> BAD
	<head>
		<title>About Me</title>
		<style type="text/css">
			h1 {
				color: purple;
			}
		</style>
	</head>

3. Link Tag
	Write CSS in separate file
	Link to HTML in the <head>
	<link rel="stylesheet" type="text/css" href="">

Colours
	Lots of built-in colours - hardly used
	Hex colour scheme #ABCDEF
	RGB colour scheme
		color: rgb(0, 255, 0);
	RGBA colour scheme
		Additional alpha: transparent colours
		Ranges from 0.0 - 1.0
		0 - No transparency
		1 - Max Transparency

Background
	Use the background property to set background colour
	For body, h4, p etc.
	Can also use it to change background to an image
		background: url(http://... jpg)
		Tiled my default horizontally and vertically
		Disabled by: 
			background-repeat: no-repeat;
		Stretch background:
			background-size: cover;
	Aim for large images or images that tile well

Border
	Need to state:
		border-width:
		border-color:
		border-style: dashed, dotted, solid
	Shortcut
		border: width style color

Element Selector
	Selecting entire element so that the styling applies to all occurrences of that element.

	p {
		color: yellow;
	}

ID Selector #
	Selecting a specific instance of an element by it's ID
	Styling only applies to that element instance.
	ID must be unique
	Single out an element

	<li>
		<input type="checkbox" id="checkbox2">
		Checkbox 2
	</li>

	#checkbox2 {
		color: yellow;
	}

Class Selector .
	E.g. Style half of li's one way, other half of li's another styling

	Group elements by class
		<li class="fruit">Bananas</li>
		<li class="fruit">Apples</li>

		.fruit {
			border: 1px solid black;
		}

Strikethrough
	text-decoration: line-through;

Checkbox attribute checked
	checked
	Ticked by default

Chrome Inspector
	Helps highlight individual HTML components
	Can view CSS attached to a particular element instance
	Can modify (does not change file) styling to see how changes would effect the component in real-time 
	See elements and implementations of other websites

Advanced Selectors
	Star
	Descendant Selector
	Adjacent Selector
	Attribute Selector
	nth of type

Star Selector
	Styling applies to EVERYTHING on the page
	* {

	}

Descendant Selector
	Common
	Takes two or more selectors
		E.g. All anchor tags within a <li>
			li a {

			}
		E.g. All elements belonging to class hello within a <li> tag
			li .hello {

			}

Adjacent Selector
	Select elements that come after another element
	Not nested, on the same level, sibling
	E.g. All ul's that come after a h4
		h4 + ul {

		}

Attribute Selector
	Select elements based off any element
	E.g. Style all anchor tags that have href www.google.co.uk
		a[href=http://www.google.co.uk] {

		}
	E.g. Style all text boxes as blue
		input[type="text"] {
			background: blue;
		}

Nth of type
	Takes a number, selects every nth of a specific element
	E.g. Select every second li, every 5th div...

	E.g. Select third occurance of ul
		ul:nth-of-type(3) {
			background: purple;
		}

	E.g. Select third occurance of li
		li:nth-of-type(3) {
			background: pink;
		}	

	E.g. Select every other li 
		li:nth-of-type(even) {
			background: green;
		}

Specificity/Inheritance
	If you style a ul, the li's also become styled.
	Inherits styling from parent
	Assigning styling to body also styles all elements within the body in the same way.
		body {
			color: red;
		}
	But Specificity overrides Inheritance styling
		A more specific styling overrides more generic styling
		E.g. body < ul < li < class < id
	Can have multiple styles targeting a single element.

	Universal Selectors < Type Selectors (li, li a, li + a) < Class, Attribute Selectors (.hello, .special, .fruits, input[type="text"]) < ID Selectors (#special)

	i.e. ID are the most specific you can get